doc_path: outputs/test/doc
log_path: outputs/test/log
secrets_path: outputs/test/secrets

db_name: pgnetworks

schemas:
    pgnetworks_staging: 'loading and preprocessing area'
    pgnetworks: 'home of the graph and routing scenarios'
    public: 'standard public schema'

extensions:
    - fuzzystrmatch
    - pg_trgm
    - postgis
    - pgrouting
    - plpython3u
    - pgcrypto
    - btree_gin
    - h3

users:
    # To create users sql with a password will be
    # automatically generated.
    # The user login will be stored in a "secrets" file
    # locally but not pushed to github.
    #
    # 1. Login roles for system access by components or programs
    - administrator
    - routing
    # 2. Login roles for persons accessing the db
    - daues_m

policies:
    # The policies follow a role based access control pattern.
    # Per schema there exist three access tiers:
    # "all" = ALL privileges within schema are granted
    # "use" = CRUD privileges on table content are granted
    # "r"   = SELECT privileges on table content are granted
    # The respective access rights are granted to each user
    # patterned like this: schema: tier

    administrator:
        pgnetworks: all
        pgnetworks_staging: all
        public: all

    routing:
        pgnetworks: read
        public: read
    
    daues_m:
        pgnetworks: all
        pgnetworks_staging: all
        public: all

subscription:
    # To subscribe to a publication the user must have the 
    # pg_create_subscription privilege. 
    # This setting decides which user should be endowed with
    # this privilege.
    # This user should also be the owner of the target tables.
    # Define here which user (grantee) needs to be able to grant 
    # ownership to the replication user by assigning it the
    # the replication user role (user_role):

    # grantee: user_role    
